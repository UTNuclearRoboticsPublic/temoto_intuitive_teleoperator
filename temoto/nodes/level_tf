import tf
import sys
import rospy
import math

rospy.init_node("tf_level")
listener = tf.TransformListener()

delta_x_calculated_right = False
delta_x_calculated_left = False
delta_x_l = 0
delta_x_r = 0
delta_y = 0
delta_z = 0
vertical_angle = 0
horizontal_angle = 0

rate = rospy.Rate(10.0)
while not rospy.is_shutdown():
    try:
        # Right Arm
	listener.waitForTransform("base_link", "right_ur5_ee_link", rospy.Time(), rospy.Duration(4.0) )
        (a1_position, a1_quaternion) = listener.lookupTransform('/base_link', '/right_ur5_ee_link', rospy.Time(0))
	print a1_position
        (a2_position, a2_quaternion) = listener.lookupTransform('/base_link', '/right_ur5_wrist_3_link', rospy.Time(0))
	print a2_position
        if delta_x_calculated_right == False:
            delta_x_r = a1_position[0] - a2_position[0]
            delta_x_calculated_right = True
        delta_y = a1_position[1] - a2_position[1]
        delta_z = a1_position[2] - a2_position[2]
        vertical_angle = math.degrees(math.asin(delta_z / delta_x_r))
        horizontal_angle = math.degrees(math.asin(delta_y / delta_x_r))
        print "Right Vertical Angle Degrees:", vertical_angle
        print "Right Horizontal Angle Degrees:", horizontal_angle
        print "-------------------------------"
        # Left Arm
        (a1_position, a1_quaternion) = listener.lookupTransform('/base_link', '/left_ur5_ee_link', rospy.Time(0))
        (a2_position, a2_quaternion) = listener.lookupTransform('/base_link', '/left_ur5_wrist_3_link', rospy.Time(0))
        if delta_x_calculated_left == False:
            delta_x_l = a1_position[0] - a2_position[0]
            delta_x_calculated_left = True
        delta_y = a1_position[1] - a2_position[1]
        delta_z = a1_position[2] - a2_position[2]
        vertical_angle = math.degrees(math.asin(delta_z / delta_x_l))
        horizontal_angle = math.degrees(math.asin(delta_y / delta_x_l))
        print "Left Vertical Angle Degrees:", vertical_angle
        print "Left Horizontal Angle Degrees:", horizontal_angle
        print "-------------------------------"

    except (tf.LookupException, tf.ConnectivityException, tf.ExtrapolationException):
	#print sys.exc_info()[0]
        continue
