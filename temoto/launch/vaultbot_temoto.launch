<launch>

  <!-- Load temoto frames for vaultbot -->
  <rosparam command="load" file="$(find temoto)/config/vaultbot.yaml" />
 

  <!-- Bring up speech-to-text and text-to-speech -->
  <!-- <include file="$(find pocketsphinx)/launch/pocketsphinx.launch" /> -->
  <!-- rosrun temoto kb_fake_voice_commander -->
  <!-- rosrun keyboard_reader keyboard_event_publisher -->
  <include file="$(find google_speech_to_text)/launch/google_speech_to_text.launch" />


  <!-- LeapMotion or SpaceMouse? -->
  <include file="$(find spacenav_node)/launch/classic.launch"/>
  <!-- <node name="leap_motion" pkg="leap_motion_controller" type="leap_motion" /> -->


  <!-- Bring up Griffin Powermate -->
  <node name="griffin_powermate" pkg="griffin_powermate" type="griffin_powermate" />
  

  <!-- Bring up some temoto core components -->
  <node name="rviz_visual" pkg="temoto" type="rviz_visual" output="screen" >
      <param name="manip_stl" type="str" value="package://temoto_support/meshes/2_finger_140_gripper_marker.stl" />
  </node>


  <node name="interpret_utterance" pkg="temoto" type="interpret_utterance" >
    <param name="input_voice_topic" type="str" value="stt/spoken_text" />
  </node>


  <!-- Specify the frame of incoming commands -->
  <node name="human_frame_broadcaster" pkg="temoto" type="human_frame_broadcaster" />
  

  <!-- MoveIt interface for right_ur5 -->
  <node name="move_robot" pkg="temoto" type="move_robot" output="screen" >
    <param name="movegroup" value="right_ur5_temoto" />
  </node>


  <!-- Navigation interface for move_base -->
  <node name="navigate_robot" pkg="temoto" type="navigate_robot" />

  
  <node name="start_teleop" pkg="temoto" type="start_teleop" launch-prefix="xterm -title '手元 TELEOPERATOR' -e">
    <param name="primary_hand" type="str" value="left" />
    <param name="navigate" type="bool" value="true" />
    <param name="manipulate" type="bool" value="true" />
    <param name="absolute_pose_input" type="bool" value="false" />   <!-- The spacemouse sends incremental commands -->
    <param name="temoto_pose_cmd_topic" type="str" value="spacenav/joy" />  <!-- Commands on this topic -->
  </node>


  <!-- bringup proper rviz config -->
  <include file="$(find temoto)/launch/vaultbot_moveit_rviz.launch">
    <arg name="config" value="true"/>
  </include>


  <!-- Open an rqt window for camera feeds -->
  <node name="rqt_image_panel" pkg="vaultbot_irp" type="rqt_image_panel.sh" />


  <!-- Start soundplay_node that is responsible for voice synthesis -->
  <node name="soundplay_node" pkg="sound_play" type="soundplay_node.py" />


  <!-- Load preplanned motions from yaml file -->
  <!-- <rosparam command="load" file="$(find temoto_support)/yaml/preplanned_motions.yaml" /> -->


  <!-- A server to execute the preplanned sequences -->
  <node name="preplanned_sequences" pkg="temoto" type="preplanned_sequences" output="screen" respawn="true" />

  <!-- Move the robot base to reach a pose -->
  <include file="$(find move_base_to_manip)/launch/move_base_to_manip.launch" />

  <!-- Hokuyo lidar -->
  <!-- <include file="$(find urg_node)/launch/urg_lidar.launch"/> -->

  <!-- Laser Stitcher Stuff -->
<!--
  <arg name="postprocessing_file_name" default="handle_turning_demo_postprocess"/>
  <arg name="laser_stitcher_yaml_file" default="handle_turning_demo_ur5"/>

  <rosparam  command="load"  file="$(find laser_stitcher)/data/lidar_ur5_manager/$(arg laser_stitcher_yaml_file).yaml"/>
  <rosparam  command="load"  file="$(find laser_stitcher)/data/postprocessing/$(arg postprocessing_file_name).yaml"/>

  <node
      name    = "laser_stitcher"
      pkg     = "laser_stitcher"
      type    = "laser_stitcher"
      args    = ""
      output  = "screen"
    >
    </node>
  <node
      name    = "lidar_ur5_manager"
      pkg     = "laser_stitcher"
      type    = "lidar_ur5_manager"
      args    = ""
      output  = "screen"
    >
    </node>
  <node
      name    = "pointcloud_processing_server"
      pkg     = "pointcloud_processing_server"
      type    = "pointcloud_processing_server"
      args    = ""
      output  = "screen"
    >
  </node>
-->

  <!-- Microphone audio -->
  <include file="$(find audio_play)/launch/play.launch"/>

  <!-- Audible warnings -->
  <!-- Note: namespaces aren't working with MoveGroupInterface -->
  <node name="singularity_warning_left" pkg="vaultbot_warnings" type="arm_warnings" output="screen" respawn="true">
    <param name="move_group_name" type="str" value="left_ur5" />
    <param name="condition_threshold" type="double" value="50.0" />
    <param name="minimum_joint_rad" type="double" value="-3.141" />
    <param name="maximum_joint_rad" type="double" value="3.141" />
  </node>

  <node name="singularity_warning_right" pkg="vaultbot_warnings" type="arm_warnings" output="screen" respawn="true">
    <param name="move_group_name" type="str" value="right_ur5_temoto" />
    <param name="condition_threshold" type="double" value="50.0" />
    <param name="rad_min_" type="double" value="-3.141" />
    <param name="rad_max_" type="double" value="3.141" />
  </node>


  <!-- launch Xbox teleop -->
  <include file="$(find husky_control)/launch/teleop.launch" />

</launch>
